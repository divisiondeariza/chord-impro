{"version":3,"sources":["serviceWorker.js","ChordInput.js","Phrase.js","index.js"],"names":["Boolean","window","location","hostname","match","ChordInput","props","state","value","nextProps","this","checkChord","input","ReactDOM","findDOMNode","chord","console","log","extended","isGood","style","color","mmChords","ChordSymbols","pitches","e","ref","type","onChange","newChord","onChordUpdate","React","Component","Phrase","chords","onChangeChords","forceUpdate","renderAddButton","index","Button","variant","size","onClick","splice","addChord","className","id","map","key","newChordValue","removeChord","Improviser","model","mm","player","promiseFn","a","async","initialize","Pending","Fulfilled","seq","quantizationInfo","stepsPerQuarter","notes","totalQuantizedSteps","STEPS_PER_PROG","STEPS_PER_QUARTER","length","continueSequence","then","contSeq","forEach","note","quantizedStartStep","quantizedEndStep","instrument","push","i","j","root","program","pitch","k","tone","context","resume","stop","start","Rejected","error","message","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a1e38ce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { chords as mmChords } from '@magenta/music' ;\nimport { extended } from \"@tonaljs/chord\";\n\n\nclass ChordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: props.value};\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return (this.props.value !== nextProps.value);\n  }\n\n  render(){\n    const handleChange = () =>{\n      checkChord();\n      var newChord = this.input.value\n      this.props.onChordUpdate(newChord);\n    }\n\n    const checkChord = () => {\n      const input = ReactDOM.findDOMNode(this);\n      const chord = input.value;\n      console.log(extended(chord))\n\n      if (isGood(chord)) {\n        input.style.color = 'black';\n      } else {\n        input.style.color = 'red';\n      }\n    }\n\n    const isGood = (chord) => {\n      if (!chord) {\n        return false;\n      }\n      try {\n        mmChords.ChordSymbols.pitches(chord);\n        return true;\n      }\n      catch(e) {\n        return false;\n      }\n    }\n\n    return  <input ref={(ref) => this.input = ref}\n                   type='text'\n                   value={this.props.value}\n                   onChange = {handleChange}/>\n  }\n}\n\nexport default ChordInput;\n","import React from 'react';\nimport ChordInput from \"./ChordInput\"\nimport Button from 'react-bootstrap/Button';\n\nclass Phrase extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chords = this.props.chords;\n    this.onChange = this.props.onChange;\n  }\n\n  render(){\n\n    const onChangeChords=()=>{\n      this.onChange(this.chords);\n      this.forceUpdate()\n    }\n\n    const addChord = (index) => {\n      this.chords.splice(index, 0, {value: \"\"});\n      onChangeChords()\n    }\n\n    const removeChord = (index) => {\n      this.chords.splice(index, 1);\n      onChangeChords()\n    }\n\n    const onChordUpdate = (newChord, index) => {\n      this.chords.splice(index, 1, {value: newChord});\n      onChangeChords()\n    }\n\n    const renderChords = () => {\n      return this.chords.map((chord, index) => {\n        return <div key={index} className=\"col-1 chord\">\n                  <ChordInput value={chord.value} onChordUpdate={(newChordValue)=>onChordUpdate(newChordValue, index)}/>\n                  <Button variant=\"outline-danger\" size=\"sm\" onClick={()=>{removeChord(index)}}>-</Button>\n                  {renderAddButton(index + 1)}\n               </div>\n      })\n    }\n\n    const renderAddButton = (index) =>{\n        return <Button variant=\"outline-success\" size=\"sm\" onClick={()=>{addChord(index)}}>+</Button>\n    }\n\n    return <div className=\"row\" id={this.props.id}>\n              <div className=\"col-1\">\n                  {renderAddButton(0)}\n              </div>\n              {renderChords()}\n           </div>\n  }\n}\n\nexport default Phrase;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as mm from '@magenta/music';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Async from \"react-async\"\nimport { saveAs } from 'file-saver';\nimport Phrase from \"./Phrase\"\nimport Button from 'react-bootstrap/Button';\n\nclass Improviser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chords = [];\n\n  }\n\n  render(){\n\n    // Number of steps to play each chord.\n    const STEPS_PER_QUARTER = 6;\n    const CHORDS_PER_BAR = 2;\n    const STEPS_PER_CHORD = STEPS_PER_QUARTER * 4 / CHORDS_PER_BAR;\n\n    // Number of times to repeat chord progression.\n    const NUM_REPS = 1;\n    const model = new mm.MusicRNN('https://storage.googleapis.com/magentadata/js/checkpoints/music_rnn/chord_pitches_improv');\n    const init_model = async ({model}) => {\n      return await model.initialize();\n    }\n\n    const sfUrl = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\n    const player = new mm.SoundFontPlayer(sfUrl);\n    var playing;\n\n\n\n    // Sample over chord progression.\n    const generate = () => {\n      console.log(\"generating\");\n      this.seq = {\n                    quantizationInfo: {stepsPerQuarter: STEPS_PER_QUARTER},\n                    notes: [],\n                    totalQuantizedSteps: 1\n                  };\n      const chords = this.chords.map(e=>e.value);\n      const STEPS_PER_PROG = chords.length * STEPS_PER_CHORD;\n\n      // Prime with root note of the first chord.\n\n      model.continueSequence(this.seq, ( NUM_REPS * STEPS_PER_PROG ) - 1, 1, chords)\n        .then((contSeq) => {\n\n          // Add the continuation to the original.\n          contSeq.notes.forEach((note) => {\n            note.quantizedStartStep += 1;\n            note.quantizedEndStep += 1;\n            note.instrument = 0;\n            this.seq.notes.push(note);\n          });\n\n\n          for (var i=0; i<NUM_REPS; i++) {\n\n            chords.forEach((chord, j)=>{\n              // Add bass\n              const root = mm.chords.ChordSymbols.root(chord);\n              this.seq.notes.push({\n                instrument: 1,\n                program: 0,\n                pitch: 36 + root,\n                quantizedStartStep: i*STEPS_PER_PROG + j*STEPS_PER_CHORD,\n                quantizedEndStep: i*STEPS_PER_PROG + (j+1)*STEPS_PER_CHORD\n              });\n\n              // Add Chords\n              mm.chords.ChordSymbols.pitches(chord).forEach((pitch, k)=>{\n                this.seq.notes.push({\n                  instrument: 2,\n                  program: 0,\n                  pitch: 48 + pitch,\n                  quantizedStartStep: i*STEPS_PER_PROG + j*STEPS_PER_CHORD,\n                  quantizedEndStep: i*STEPS_PER_PROG + (j+1)*STEPS_PER_CHORD\n                });\n              })\n\n            })\n\n          }\n\n          // Set total sequence length.\n          this.seq.totalQuantizedSteps = STEPS_PER_PROG * NUM_REPS;\n          console.log(this.seq);\n\n        })\n        console.log(\"done\");\n        this.forceUpdate()\n    }\n\n    const playOnce = () => {\n      if(this.seq){\n        player.start(this.seq, 120).then(() => {\n          playing = false;\n        });\n      }\n    }\n\n    const play = () => {\n\n      playing = true;\n      mm.Player.tone.context.resume();\n      player.stop();\n      playOnce();\n    }\n\n    const download = () => {\n      if (!this.seq) {\n        alert('You must generate a trio before you can download it!');\n      } else {\n        saveAs(new File([mm.sequenceProtoToMidi(this.seq)], 'seq.mid'));\n      }\n    }\n\n\n    return   <div className=\"container\">\n                     <Async promiseFn={init_model} model={model}>\n                       <Async.Pending>Loading...</Async.Pending>\n                       <Async.Fulfilled>\n                          <Phrase id='chords' className=\"row\" chords={this.chords} onChange= {(chords)=>{this.chords=chords}}/>\n                       <br/>\n                        <Button variant=\"outline-primary\" onClick = {generate}>Generate</Button>\n                       {this.seq?(\n                         <Button variant=\"outline-primary\" onClick = {play}>Play</Button>\n                       ):\"\"\n                       }\n                       </Async.Fulfilled>\n                       <Async.Rejected>{error => `Something went wrong: ${error.message}`}</Async.Rejected>\n                     </Async>\n             </div>\n  }\n}\n\n\n\nReactDOM.render(<Improviser />,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}